Index: src/TaskType.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>public class TaskType {\n    private double size;\n    private String type;\n    public TaskType(double size, String type) {\n        this.size = size;\n        this.type=type;\n    }\n    public void check(){\n        if(type.equals(\"T1\")){\n\n        }\n    }\n    public String getType() {\n        return type;\n    }\n    public void setType(String type){\n        this.type = type;\n    }\n\n    public double getSize() {\n        return size;\n    }\n\n    public void setSize(double size) {\n        this.size = size;\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/TaskType.java b/src/TaskType.java
--- a/src/TaskType.java	(revision 6bb16b136c732d7ccf62ab851ccb7988567cd1b6)
+++ b/src/TaskType.java	(date 1716123103678)
@@ -5,11 +5,6 @@
         this.size = size;
         this.type=type;
     }
-    public void check(){
-        if(type.equals("T1")){
-
-        }
-    }
     public String getType() {
         return type;
     }
Index: src/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.io.*;\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\npublic class Main {\n    public static void main(String[] args) {\n        String input = null;\n        try {\n            input = ReadTask(\"WrongFile.txt\");\n            String result = Rename(input);\n            System.out.println(\"Modified task statement: \" + result);\n        } catch (IOException e) {\n            System.out.println(\"Invalid tasktypeID \" + e.getMessage());\n        } catch (IllegalArgumentException e) {\n            System.out.println(\"Error: \" + e.getMessage());\n        }\n        String filePath = \"WrongFile.txt\";\n\n        try (BufferedReader bufferReader = new BufferedReader(new FileReader(filePath))) {\n            String line;\n            while ((line = bufferReader.readLine()) != null) {\n                String[] words = line.split(\"\\s+\");\n                for (String word : words) {\n                    //System.out.println(word);\n                }\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n\n        //Number of parentheses comparison\n        int sumOpen = 0;\n        int sumClose = 0;\n        for (int i = 0; i < input.length(); i++) {\n\n            if (input.charAt(i) == '(') {\n                sumOpen++;\n            } else if (input.charAt(i) == ')') {\n                sumClose++;\n            }\n        }\n        System.out.println();\n        //d3\n        Control();\n\n        try {\n            if (sumOpen < sumClose) {\n                throw new Exception(\"Error: Missing '('\");\n\n            } else if (sumClose < sumOpen) {\n                throw new Exception(\"Error: Missing ')'\");\n            }\n        } catch (Exception e) {\n            System.out.println(e.getMessage());\n        }\n        System.out.println();\n\n        //Checking whether tasks are on the station or not\n        String line2;\n        ArrayList tasksOfJob= new ArrayList();\n        int startLineNumber=0;\n        int endLineNumber=0;\n        try {\n            BufferedReader bufferedReader = new BufferedReader(new FileReader(filePath));\n            while ((line2 = bufferedReader.readLine()) != null) {\n                String[] words = line2.split(\"\\s+\");\n                for(int i=0;i<words.length;i++){\n                    if(words[i].equals(\"(JOBTYPES\")){\n                        startLineNumber=i;\n                    }\n                }\n                for(int j=0;j<words.length;j++){\n                    if(words[j].equals(\"(STATIONS\")){\n                        endLineNumber=j;\n                    }\n                }\n                for(int k=startLineNumber;k<endLineNumber;k++){\n                    if(words[k].startsWith(\"T\")) {\n                        tasksOfJob.add(words[k]);\n                    }\n                }\n                ArrayList taskOfStation= new ArrayList();\n                for(int a=endLineNumber;a<words.length;a++){\n                    if(words[a].startsWith(\"T\")) {\n                        taskOfStation.add(words[a]);\n                    }\n                }\n                int b=taskOfStation.size();\n                int c=tasksOfJob.size();\n                for(int i=0;i<b;i++){\n                    for(int j=0;j<c;j++){\n                        if(taskOfStation.get(i)!=tasksOfJob.get(j)){\n                            throw new Exception(\"Task\"+i +\"is not executed at any station\");\n                        }\n                    }\n                }\n            }\n\n        }catch(Exception e){\n            System.out.println(e.getMessage());\n        }\n\n        String fileName = \"WrongFile.txt\";\n        List<Job> jobs = readJobs(fileName);\n\n        // Print all jobs\n        for (Job job : jobs) {\n            System.out.println(job);\n        }\n\n        System.out.println();\n        try {\n            JobErrors parser = new JobErrors();\n            List<Job> job = parser.parseJobFile(\"jobfile.txt\");\n            //  JobTracker tracker = new JobTracker(jobs);\n\n        /*    for (int time = 0; time <= 50; time += 1) {\n                System.out.println(\"Tracking jobs at time: \" + time);\n                tracker.trackJobStates(time);\n                System.out.println();\n            } */\n\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        System.out.println();\n\n        WorkFlow();\n\n    }\n    //d3\n    private static void Control() {\n        StringBuilder stringBuilder = new StringBuilder();\n\n        try (BufferedReader br = new BufferedReader(new FileReader(\"WrongFile.txt\"))) {\n            String line;\n            while ((line = br.readLine()) != null) {\n                stringBuilder.append(line).append(\"\\n\");\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n\n        if (stringBuilder.length() > 0) {\n            stringBuilder.setLength(stringBuilder.length() - 1);\n        }\n\n        String element = stringBuilder.toString();\n\n        String[] lines = element.split(\"\\n\");\n        List<String> inputList = new ArrayList<>();\n\n        for (String line : lines) {\n            String[] words = line.trim().split(\"\\\\s+\");\n            for (String word : words) {\n                inputList.add(word.replaceAll(\"[()]\", \"\"));\n            }\n        }\n\n        String[] wordsArray = inputList.toArray(new String[0]);\n        for (int i=0; i< wordsArray.length; i++){\n            System.out.println(wordsArray[i]);\n        }\n        int jobTypesIndex = 0;\n        int stationsIndex = 0;\n\n        for (int j =0; j < wordsArray.length; j++) {\n            if (wordsArray[j].equals(\"JOBTYPES\")) {\n                jobTypesIndex = j;\n            }\n        }\n        for (int k = 0; k < wordsArray.length; k++) {\n            if (wordsArray[k].equals(\"STATIONS\")) {\n                stationsIndex = k;\n            }\n        }\n\n        System.out.println(\"Line number of where 'JobTypes' is \"+jobTypesIndex);\n        System.out.println(\"Line number of where 'Station' is \"+stationsIndex);\n\n        List<String> taskTypes = new ArrayList<>();\n        List<Double> defaultSizes = new ArrayList<>();\n        List<String> declaredTaskTypes = new ArrayList<>();\n        List<String> duplicateTaskTypes = new ArrayList<>();\n        List<String> invalidTaskTypes = new ArrayList<>();\n        List<String> negativeSizeTasks = new ArrayList<>();\n\n        // Extracting T elements and default sizes\n        for (int i = 0; i < jobTypesIndex; i++) {\n            String word = wordsArray[i];\n            if (word.startsWith(\"T\")) {\n                if (declaredTaskTypes.contains(word)) {\n                    duplicateTaskTypes.add(word);\n                } else {\n                    declaredTaskTypes.add(word);\n                    taskTypes.add(word);\n                    try {\n                        double size = Double.parseDouble(wordsArray[i + 1]);\n                        if (size < 0) {\n                            negativeSizeTasks.add(word);\n                        }\n                        defaultSizes.add(size);\n                        i++;\n                    } catch (NumberFormatException e) {\n                        defaultSizes.add(null); // No default size\n                    }\n                }\n            } else if (!word.matches(\"[0-9]+\") && !word.equals(\"TASKTYPES\")) {\n                invalidTaskTypes.add(word);\n            }\n        }\n\n        List<String> declaredJobTypes = new ArrayList<>();\n        List<String> jobsWithNegativeSize = new ArrayList<>();\n        List<String> undeclaredTaskTypes = new ArrayList<>();\n        System.out.println();\n\n        for (int i = jobTypesIndex + 1; i < stationsIndex; i++) {\n            String word = wordsArray[i];\n            if (word.startsWith(\"J\")) {\n                if (declaredJobTypes.contains(word)) {\n                    System.out.println(\"Error: Job type \" + word + \" already declared.\");\n                } else {\n                    declaredJobTypes.add(word);\n                }\n            } else if (word.startsWith(\"T\")) {\n                if (!taskTypes.contains(word)) {\n                    undeclaredTaskTypes.add(word);\n                    System.out.println(\"Error: Task type \" + word + \" not declared in TASKTYPES.\");\n                }\n                try {\n                    double size = Double.parseDouble(wordsArray[i + 1]);\n                    if (size < 0) {\n                        System.out.println(\"Error: Negative size for task type \" + word + \" in job type \" + wordsArray[i - 1]);\n                        jobsWithNegativeSize.add(wordsArray[i - 1]);\n                    }\n                    i++;\n                } catch (NumberFormatException e) {\n                    int tIndex = taskTypes.indexOf(word);\n                    if (tIndex >= 0 && defaultSizes.get(tIndex) == null) {\n                        System.out.println(\"Error: Task type \" + word + \" has no default size.\");\n                    }\n                }\n            }\n        }\n\n        List<String> stationTasks = new ArrayList<>();\n        for (int i = stationsIndex + 1; i < wordsArray.length; i++) {\n            String word = wordsArray[i];\n            if (word.startsWith(\"T\")) {\n                stationTasks.add(word);\n            }\n        }\n        for (int i =0; i< taskTypes.size(); i++){\n            if (!stationTasks.contains(taskTypes.get(i))) {\n                System.out.println(\"Error: Task type \" + taskTypes.get(i) + \" is not executed in any station.\");\n            }\n        }\n        int openParenthesisCount = 0;\n        int closeParenthesisCount = 0;\n        for (int i =0; i<wordsArray.length; i++){\n            if(wordsArray[i].contains(\"(\")){\n                openParenthesisCount++;\n            } if (wordsArray[i].contains(\")\")) {\n                closeParenthesisCount++;\n            }\n        }\n        if (openParenthesisCount != closeParenthesisCount) {\n            System.out.println(\"Error: Unmatched parentheses found.\");\n        }\n\n        for (int m =0; m<duplicateTaskTypes.size(); m++) {\n            System.out.println(\"Error: Duplicate task type \" + duplicateTaskTypes.get(m) + \" found.\");\n        }\n\n        for (int k =0; k<invalidTaskTypes.size(); k++) {\n            System.out.println(\"Error: Invalid task type ID \" + invalidTaskTypes.get(k));\n        }\n\n        for (int l =0; l<negativeSizeTasks.size(); l++){\n            System.out.println(\"Error: Negative default size for task type \" + negativeSizeTasks.get(l));\n        }\n    }\n\n    public static String ReadTask(String inputfile) throws IOException {\n        StringBuilder stringBuilder = new StringBuilder();\n        try (BufferedReader reader = new BufferedReader(new FileReader(inputfile))) {\n            String line;\n            while ((line = reader.readLine()) != null) {\n                stringBuilder.append(line).append(\"\\n\"); // Append each line with a new line character\n            }\n        }\n        return stringBuilder.toString();\n    }\n\n    public static String Rename(String input) {\n        if (Character.isDigit(input.charAt(0))) {\n            throw new IllegalArgumentException(\"Task statement cannot start with a number!\");\n        }\n        return input;\n    }\n    // Method to read jobs from file\n    public static List<Job> readJobs(String fileName) {\n        List<Job> jobs = new ArrayList<>();\n\n        try (BufferedReader br = new BufferedReader(new FileReader(fileName))) {\n            String line;\n            while ((line = br.readLine()) != null) {\n                parseJobLine(line, jobs);\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n\n        return jobs;\n    }\n\n    // Method to parse each line and add to jobs list\n    private static void parseJobLine(String line, List<Job> jobs) {\n        // Remove parentheses and split by spaces\n        line = line.replaceAll(\"[()]\", \"\").trim();\n        String[] parts = line.split(\"\\\\s+\");\n\n        if (parts.length > 0) {\n            String jobName = parts[0];\n            ArrayList<JobDetail> details = new ArrayList<>();\n            for (int i = 1; i < parts.length; i += 2) {\n                String type = parts[i];\n                int value = (i + 1 < parts.length && isNumeric(parts[i + 1])) ? Integer.parseInt(parts[i + 1]) : 0;\n                details.add(new JobDetail(type, value));\n            }\n            jobs.add(new Job(jobName, details));\n        }\n    }\n\n    // Method to check if a string is numeric\n    private static boolean isNumeric(String str) {\n        try {\n            Integer.parseInt(str);\n            return true;\n        } catch (NumberFormatException e) {\n            return false;\n        }\n    }\n\n\n    private static void WorkFlow() {\n        StringBuilder contentBuilder = new StringBuilder();\n\n        try (BufferedReader br = new BufferedReader(new FileReader(\"InputFile.txt\"))) {\n            String line;\n            while ((line = br.readLine()) != null) {\n                contentBuilder.append(line).append(\"\\n\");\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n\n        if (contentBuilder.length() > 0) {\n            contentBuilder.setLength(contentBuilder.length() - 1);\n        }\n\n        String elementString = contentBuilder.toString();\n        String[] lines = elementString.split(\"\\n\");\n        List<String> inputList = new ArrayList<>();\n\n        for (String print : lines) {\n            String[] words = print.trim().split(\"\\\\s+\");\n            for (String word : words) {\n                // Remove parentheses\n                inputList.add(word.replaceAll(\"[()]\", \"\"));\n            }\n        }\n\n        String[] wordsArray = inputList.toArray(new String[0]);\n        for (String word : wordsArray) {\n           // System.out.println(word);\n        }\n\n        int startLineNumber = 0;\n        int endLineNumber = 0;\n\n        for (int i = 0; i < wordsArray.length; i++) {\n            if (wordsArray[i].equals(\"JOBTYPES\")) {\n                startLineNumber = i;\n            }\n        }\n        for (int j = 0; j < wordsArray.length; j++) {\n            if (wordsArray[j].equals(\"STATIONS\")) {\n                endLineNumber = j;\n            }\n        }\n\n\n\n        Map<String, Double> defaultTaskSizes = new HashMap<>();\n\n\n        for (int i = 1; i < startLineNumber; i++) {\n            if (wordsArray[i].startsWith(\"T\")) {\n                try {\n                    double size = Double.parseDouble(wordsArray[i + 1]);\n                    defaultTaskSizes.put(wordsArray[i], size);\n                } catch (NumberFormatException | ArrayIndexOutOfBoundsException e) {\n\n                    defaultTaskSizes.put(wordsArray[i], 0.0);\n                }\n            }\n        }\n\n        List<String> taskArrayList = new ArrayList<>();\n        List<Double> sizeArray = new ArrayList<>();\n        List<Integer> taskIndices = new ArrayList<>();\n        List<Integer> sizeIndices = new ArrayList<>();\n\n\n        Map<String, List<Task>> jobTasksMap = new HashMap<>();\n        String currentJob = null;\n\n\n        for (int i = startLineNumber + 1; i < endLineNumber; i++) {\n            if (wordsArray[i].startsWith(\"J\")) {\n                currentJob = wordsArray[i];\n                jobTasksMap.putIfAbsent(currentJob, new ArrayList<>());\n            }\n\n            if (wordsArray[i].startsWith(\"T\") && currentJob != null) {\n                taskArrayList.add(wordsArray[i]);\n                taskIndices.add(i);\n                double taskSize = defaultTaskSizes.getOrDefault(wordsArray[i], 0.0);\n                if (i + 1 < wordsArray.length && isNumericWorkFile(wordsArray[i + 1])) {\n                    taskSize = Double.parseDouble(wordsArray[i + 1]);\n                    sizeIndices.add(i + 1);\n                    i++; // Skip the next element as it is the size\n                }\n                Task task = new Task(wordsArray[i], taskSize);\n                jobTasksMap.get(currentJob).add(task);\n            } else {\n                try {\n                    double size = Double.parseDouble(wordsArray[i]);\n                    sizeArray.add(size);\n                } catch (NumberFormatException e) {\n\n                }\n            }\n        }\n\n\n        for (String job : jobTasksMap.keySet()) {\n            System.out.println(job + \" Task Array List:\");\n            double totalDuration = 0.0;\n            for (Task task : jobTasksMap.get(job)) {\n                double speed = getStationSpeed(task.getTaskType(), wordsArray, endLineNumber);\n                double duration = task.getTaskSize() / speed;\n                totalDuration += duration;\n                System.out.println(\"Task Type: \" + task.getTaskType() + \", Task Size: \" + task.getTaskSize() + \", Duration: \" + duration);\n            }\n\n            System.out.println(\"Total Duration for \" + job + \": \" + totalDuration);\n        }\n\n        System.out.println(\"Size Array with Indices:\");\n        for (int i = 0; i < sizeArray.size(); i++) {\n            System.out.println(\"Index: \" + sizeIndices.get(i) + \", Size: \" + sizeArray.get(i) + \", Task: \" + wordsArray[sizeIndices.get(i) - 1]);\n        }\n\n        System.out.println(\"Task Indices:\");\n        for (int index : taskIndices) {\n            System.out.println(index);\n        }\n\n        System.out.println(\"Size Indices:\");\n        for (int index : sizeIndices) {\n            System.out.println(index);\n        }\n\n        Station stationNN = new Station();\n        Station stationNY = new Station();\n        Station stationYN = new Station();\n        Station stationYY = new Station();\n    }\n\n    private static boolean isNumericWorkFile(String str) {\n        try {\n            Double.parseDouble(str);\n            return true;\n        } catch (NumberFormatException e) {\n            return false;\n        }\n    }\n\n    private static double getStationSpeed(String taskType, String[] wordsArray, int endLineNumber) {\n        for (int i = endLineNumber + 1; i < wordsArray.length; i++) {\n            if (wordsArray[i].startsWith(\"S\")) {\n                for (int j = i + 1; j < wordsArray.length && !wordsArray[j].startsWith(\"S\"); j++) {\n                    if (wordsArray[j].equals(taskType)) {\n                        try {\n                            return Double.parseDouble(wordsArray[j + 1]);\n                        } catch (NumberFormatException e) {\n                        }\n                    }\n                }\n            }\n        }\n        return 1.0; // Default speed if not found\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Main.java b/src/Main.java
--- a/src/Main.java	(revision 6bb16b136c732d7ccf62ab851ccb7988567cd1b6)
+++ b/src/Main.java	(date 1716136034120)
@@ -9,9 +9,24 @@
 
 public class Main {
     public static void main(String[] args) {
+        if (args.length < 2) {
+            System.out.println("Please enter workflow file and job file names...");
+            return;
+        }
+
+        String workflowFileName;
+        String jobFileName;
+
+        if (args[0].startsWith("job.")) {
+            jobFileName = args[0];
+            workflowFileName = args[1];
+        } else {
+            jobFileName = args[1];
+            workflowFileName = args[0];
+        }
         String input = null;
         try {
-            input = ReadTask("WrongFile.txt");
+            input = ReadTask(args[0]);
             String result = Rename(input);
             System.out.println("Modified task statement: " + result);
         } catch (IOException e) {
@@ -19,7 +34,7 @@
         } catch (IllegalArgumentException e) {
             System.out.println("Error: " + e.getMessage());
         }
-        String filePath = "WrongFile.txt";
+        String filePath = args[0];
 
         try (BufferedReader bufferReader = new BufferedReader(new FileReader(filePath))) {
             String line;
@@ -105,7 +120,7 @@
             System.out.println(e.getMessage());
         }
 
-        String fileName = "WrongFile.txt";
+        String fileName = args[0];
         List<Job> jobs = readJobs(fileName);
 
         // Print all jobs
@@ -116,7 +131,7 @@
         System.out.println();
         try {
             JobErrors parser = new JobErrors();
-            List<Job> job = parser.parseJobFile("jobfile.txt");
+            List<Job> job = parser.parseJobFile(args[1]);
             //  JobTracker tracker = new JobTracker(jobs);
 
         /*    for (int time = 0; time <= 50; time += 1) {
@@ -133,6 +148,7 @@
         WorkFlow();
 
     }
+
     //d3
     private static void Control() {
         StringBuilder stringBuilder = new StringBuilder();
@@ -340,6 +356,7 @@
 
     // Method to check if a string is numeric
     private static boolean isNumeric(String str) {
+
         try {
             Integer.parseInt(str);
             return true;
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"AutoImportSettings\">\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\n  </component>\n  <component name=\"ChangeListManager\">\n    <list default=\"true\" id=\"c6b30def-f593-410b-8ca6-fc914bf6677d\" name=\"Changes\" comment=\"changes\">\n      <change beforePath=\"$PROJECT_DIR$/.idea/misc.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/misc.xml\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_18_05_2024_23_26__Changes_.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_18_05_2024_23_26__Changes_.xml\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/Main.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/Main.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/Station_Req7.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/Station_Req7.java\" afterDir=\"false\" />\n    </list>\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\n  </component>\n  <component name=\"FileTemplateManagerImpl\">\n    <option name=\"RECENT_TEMPLATES\">\n      <list>\n        <option value=\"Class\" />\n      </list>\n    </option>\n  </component>\n  <component name=\"Git.Settings\">\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\n  </component>\n  <component name=\"GitHubPullRequestSearchHistory\">{\n  &quot;lastFilter&quot;: {\n    &quot;state&quot;: &quot;OPEN&quot;,\n    &quot;assignee&quot;: &quot;EmirayDurmaz&quot;\n  }\n}</component>\n  <component name=\"GithubPullRequestsUISettings\">{\n  &quot;selectedUrlAndAccountId&quot;: {\n    &quot;url&quot;: &quot;https://github.com/Yaseminkocar/se116project.git&quot;,\n    &quot;accountId&quot;: &quot;f876dfee-e282-4bb3-ac51-b7a06d3e1894&quot;\n  }\n}</component>\n  <component name=\"MarkdownSettingsMigration\">\n    <option name=\"stateVersion\" value=\"1\" />\n  </component>\n  <component name=\"ProjectColorInfo\">{\n  &quot;customColor&quot;: &quot;&quot;,\n  &quot;associatedIndex&quot;: 4\n}</component>\n  <component name=\"ProjectId\" id=\"2flxulGE1TD1wiPGhb4j94xWvUK\" />\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\">\n    <OptionsSetting value=\"false\" id=\"Update\" />\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\n  </component>\n  <component name=\"ProjectViewState\">\n    <option name=\"flattenPackages\" value=\"true\" />\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\n    <option name=\"showLibraryContents\" value=\"true\" />\n    <option name=\"showMembers\" value=\"true\" />\n    <option name=\"showVisibilityIcons\" value=\"true\" />\n  </component>\n  <component name=\"PropertiesComponent\">{\n  &quot;keyToString&quot;: {\n    &quot;Application.Main.executor&quot;: &quot;Run&quot;,\n    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\n    &quot;git-widget-placeholder&quot;: &quot;master&quot;,\n    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,\n    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,\n    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;\n  }\n}</component>\n  <component name=\"RunManager\" selected=\"Application.Main\">\n    <configuration name=\"Job_Req5\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\n      <option name=\"MAIN_CLASS_NAME\" value=\"Job_Req5\" />\n      <module name=\"asdfgh\" />\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <configuration name=\"Main\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\n      <option name=\"MAIN_CLASS_NAME\" value=\"Main\" />\n      <module name=\"asdfgh\" />\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <configuration name=\"Station_Req7\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\n      <option name=\"MAIN_CLASS_NAME\" value=\"Station_Req7\" />\n      <module name=\"asdfgh\" />\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <configuration name=\"WorkFlowParser\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\n      <option name=\"MAIN_CLASS_NAME\" value=\"WorkFlowParser\" />\n      <module name=\"asdfgh\" />\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <configuration name=\"d1\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\n      <option name=\"MAIN_CLASS_NAME\" value=\"d1\" />\n      <module name=\"asdfgh\" />\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <recent_temporary>\n      <list>\n        <item itemvalue=\"Application.Main\" />\n        <item itemvalue=\"Application.Station_Req7\" />\n        <item itemvalue=\"Application.d1\" />\n        <item itemvalue=\"Application.Job_Req5\" />\n        <item itemvalue=\"Application.WorkFlowParser\" />\n      </list>\n    </recent_temporary>\n  </component>\n  <component name=\"SharedIndexes\">\n    <attachedChunks>\n      <set>\n        <option value=\"bundled-jdk-9f38398b9061-18abd8497189-intellij.indexing.shared.core-IU-241.14494.240\" />\n        <option value=\"bundled-js-predefined-1d06a55b98c1-74d2a5396914-JavaScript-IU-241.14494.240\" />\n      </set>\n    </attachedChunks>\n  </component>\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\n  <component name=\"TaskManager\">\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\n      <changelist id=\"c6b30def-f593-410b-8ca6-fc914bf6677d\" name=\"Changes\" comment=\"\" />\n      <created>1714389694199</created>\n      <option name=\"number\" value=\"Default\" />\n      <option name=\"presentableId\" value=\"Default\" />\n      <updated>1714389694199</updated>\n    </task>\n    <task id=\"LOCAL-00001\" summary=\"commit\">\n      <created>1714390906500</created>\n      <option name=\"number\" value=\"00001\" />\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1714390906500</updated>\n    </task>\n    <task id=\"LOCAL-00002\" summary=\"meltemin commiti\">\n      <created>1714461371483</created>\n      <option name=\"number\" value=\"00002\" />\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1714461371483</updated>\n    </task>\n    <task id=\"LOCAL-00003\" summary=\"meltemin commiti 2\">\n      <created>1714461447617</created>\n      <option name=\"number\" value=\"00003\" />\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1714461447617</updated>\n    </task>\n    <task id=\"LOCAL-00004\" summary=\"Classes\">\n      <created>1714565742088</created>\n      <option name=\"number\" value=\"00004\" />\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1714565742088</updated>\n    </task>\n    <task id=\"LOCAL-00005\" summary=\"some bugs fixed\">\n      <created>1715370784472</created>\n      <option name=\"number\" value=\"00005\" />\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1715370784472</updated>\n    </task>\n    <task id=\"LOCAL-00006\" summary=\"changes\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1715885718441</created>\n      <option name=\"number\" value=\"00006\" />\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1715885718441</updated>\n    </task>\n    <task id=\"LOCAL-00007\" summary=\"changes\">\n      <created>1715937727609</created>\n      <option name=\"number\" value=\"00007\" />\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1715937727609</updated>\n    </task>\n    <task id=\"LOCAL-00008\" summary=\"senkronize\">\n      <created>1715941589521</created>\n      <option name=\"number\" value=\"00008\" />\n      <option name=\"presentableId\" value=\"LOCAL-00008\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1715941589521</updated>\n    </task>\n    <task id=\"LOCAL-00009\" summary=\"commit repeat 2\">\n      <created>1715953732287</created>\n      <option name=\"number\" value=\"00009\" />\n      <option name=\"presentableId\" value=\"LOCAL-00009\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1715953732287</updated>\n    </task>\n    <task id=\"LOCAL-00010\" summary=\"Exception addition\">\n      <created>1715953869614</created>\n      <option name=\"number\" value=\"00010\" />\n      <option name=\"presentableId\" value=\"LOCAL-00010\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1715953869614</updated>\n    </task>\n    <task id=\"LOCAL-00011\" summary=\"commit\">\n      <created>1715963243663</created>\n      <option name=\"number\" value=\"00011\" />\n      <option name=\"presentableId\" value=\"LOCAL-00011\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1715963243663</updated>\n    </task>\n    <task id=\"LOCAL-00012\" summary=\"hash and arraylist tries\">\n      <created>1715965005880</created>\n      <option name=\"number\" value=\"00012\" />\n      <option name=\"presentableId\" value=\"LOCAL-00012\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1715965005880</updated>\n    </task>\n    <task id=\"LOCAL-00013\" summary=\"changes\">\n      <created>1716029189997</created>\n      <option name=\"number\" value=\"00013\" />\n      <option name=\"presentableId\" value=\"LOCAL-00013\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1716029189998</updated>\n    </task>\n    <task id=\"LOCAL-00014\" summary=\"easy to read\">\n      <created>1716029847342</created>\n      <option name=\"number\" value=\"00014\" />\n      <option name=\"presentableId\" value=\"LOCAL-00014\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1716029847342</updated>\n    </task>\n    <task id=\"LOCAL-00015\" summary=\"changes\">\n      <created>1716043455622</created>\n      <option name=\"number\" value=\"00015\" />\n      <option name=\"presentableId\" value=\"LOCAL-00015\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1716043455623</updated>\n    </task>\n    <task id=\"LOCAL-00016\" summary=\"changes\">\n      <created>1716043464287</created>\n      <option name=\"number\" value=\"00016\" />\n      <option name=\"presentableId\" value=\"LOCAL-00016\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1716043464288</updated>\n    </task>\n    <option name=\"localTasksCounter\" value=\"17\" />\n    <servers />\n  </component>\n  <component name=\"TypeScriptGeneratedFilesManager\">\n    <option name=\"version\" value=\"3\" />\n  </component>\n  <component name=\"Vcs.Log.Tabs.Properties\">\n    <option name=\"TAB_STATES\">\n      <map>\n        <entry key=\"MAIN\">\n          <value>\n            <State />\n          </value>\n        </entry>\n      </map>\n    </option>\n  </component>\n  <component name=\"VcsManagerConfiguration\">\n    <MESSAGE value=\"meltemin commiti\" />\n    <MESSAGE value=\"meltemin commiti 2\" />\n    <MESSAGE value=\"Classes\" />\n    <MESSAGE value=\"some bugs fixed\" />\n    <MESSAGE value=\"senkronize\" />\n    <MESSAGE value=\"commit repeat 2\" />\n    <MESSAGE value=\"Exception addition\" />\n    <MESSAGE value=\"commit\" />\n    <MESSAGE value=\"hash and arraylist tries\" />\n    <MESSAGE value=\"easy to read\" />\n    <MESSAGE value=\"changes\" />\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"changes\" />\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 6bb16b136c732d7ccf62ab851ccb7988567cd1b6)
+++ b/.idea/workspace.xml	(date 1716123608935)
@@ -4,12 +4,11 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="c6b30def-f593-410b-8ca6-fc914bf6677d" name="Changes" comment="changes">
+    <list default="true" id="c6b30def-f593-410b-8ca6-fc914bf6677d" name="Changes" comment="arrangements">
       <change beforePath="$PROJECT_DIR$/.idea/misc.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/misc.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_18_05_2024_23_26__Changes_.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_18_05_2024_23_26__Changes_.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/Main.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/Main.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/Station_Req7.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/Station_Req7.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/TaskType.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/TaskType.java" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -69,6 +68,13 @@
   }
 }</component>
   <component name="RunManager" selected="Application.Main">
+    <configuration name="D3" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
+      <option name="MAIN_CLASS_NAME" value="D3" />
+      <module name="asdfgh" />
+      <method v="2">
+        <option name="Make" enabled="true" />
+      </method>
+    </configuration>
     <configuration name="Job_Req5" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
       <option name="MAIN_CLASS_NAME" value="Job_Req5" />
       <module name="asdfgh" />
@@ -85,13 +91,6 @@
     </configuration>
     <configuration name="Station_Req7" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
       <option name="MAIN_CLASS_NAME" value="Station_Req7" />
-      <module name="asdfgh" />
-      <method v="2">
-        <option name="Make" enabled="true" />
-      </method>
-    </configuration>
-    <configuration name="WorkFlowParser" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
-      <option name="MAIN_CLASS_NAME" value="WorkFlowParser" />
       <module name="asdfgh" />
       <method v="2">
         <option name="Make" enabled="true" />
@@ -107,10 +106,10 @@
     <recent_temporary>
       <list>
         <item itemvalue="Application.Main" />
+        <item itemvalue="Application.D3" />
         <item itemvalue="Application.Station_Req7" />
         <item itemvalue="Application.d1" />
         <item itemvalue="Application.Job_Req5" />
-        <item itemvalue="Application.WorkFlowParser" />
       </list>
     </recent_temporary>
   </component>
@@ -244,7 +243,14 @@
       <option name="project" value="LOCAL" />
       <updated>1716043464288</updated>
     </task>
-    <option name="localTasksCounter" value="17" />
+    <task id="LOCAL-00017" summary="arrangements">
+      <created>1716114660149</created>
+      <option name="number" value="00017" />
+      <option name="presentableId" value="LOCAL-00017" />
+      <option name="project" value="LOCAL" />
+      <updated>1716114660149</updated>
+    </task>
+    <option name="localTasksCounter" value="18" />
     <servers />
   </component>
   <component name="TypeScriptGeneratedFilesManager">
@@ -273,6 +279,7 @@
     <MESSAGE value="hash and arraylist tries" />
     <MESSAGE value="easy to read" />
     <MESSAGE value="changes" />
-    <option name="LAST_COMMIT_MESSAGE" value="changes" />
+    <MESSAGE value="arrangements" />
+    <option name="LAST_COMMIT_MESSAGE" value="arrangements" />
   </component>
 </project>
\ No newline at end of file
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_19\" default=\"true\" project-jdk-name=\"20\" project-jdk-type=\"JavaSDK\">\n    <output url=\"file://$PROJECT_DIR$/out\" />\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	(revision 6bb16b136c732d7ccf62ab851ccb7988567cd1b6)
+++ b/.idea/misc.xml	(date 1716123112267)
@@ -1,6 +1,6 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
-  <component name="ProjectRootManager" version="2" languageLevel="JDK_19" default="true" project-jdk-name="20" project-jdk-type="JavaSDK">
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_17" default="true" project-jdk-name="20" project-jdk-type="JavaSDK">
     <output url="file://$PROJECT_DIR$/out" />
   </component>
 </project>
\ No newline at end of file

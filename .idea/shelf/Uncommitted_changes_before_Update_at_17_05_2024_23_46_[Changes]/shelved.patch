Index: src/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.io.*;\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.util.HashMap;\nimport java.util.Set;\nimport java.util.ArrayList;\nimport java.util.*;\npublic class Main {\n    public static void main(String[] args) {\n        String input = null;\n        try {\n            input = TaskReading(\"WrongFile.txt\");\n            String result = Rename(input);\n            System.out.println(\"Modified task statement: \" + result);\n        } catch (IOException e) {\n            System.out.println(\"Invalid tasktypeID \" + e.getMessage());\n        } catch (IllegalArgumentException e) {\n            System.out.println(\"Error: \" + e.getMessage());\n        }\n\n        String filePath = \"WrongFile.txt\";\n\n        try (BufferedReader bufferreader = new BufferedReader(new FileReader(filePath))) {\n            String line;\n            while ((line = bufferreader.readLine()) != null) {\n                String[] words = line.split(\"\\s+\");\n                for (String word : words) {\n                    System.out.println(word);\n                }\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n\n        String filePath2 = \"WrongFile.txt\";\n\n        try {\n            parseWorkflowFile(filePath);\n        } catch (IOException e) {\n            System.out.println(\"Error reading file: \" + e.getMessage());\n        } catch (IllegalArgumentException e) {\n            System.out.println(\"Error: \" + e.getMessage());\n        }\n        //parantez sayısı karşılaştırma\n        int sumopen = 0;\n        int sumclose = 0;\n        for (int i = 0; i < input.length(); i++) {\n\n            if (input.charAt(i) == '(') {\n                sumopen++;\n            } else if (input.charAt(i) == ')') {\n                sumclose++;\n            }\n\n        }\n        try {\n            if (sumopen < sumclose) {\n                throw new Exception(\"missing '('\");\n\n            } else if (sumclose < sumopen) {\n                throw new Exception(\"missing ')'\");\n            }\n        } catch (Exception e) {\n            System.out.println(e);\n        }\n        //tasklerin stationda var yok kontrolü\n        String line2;\n        ArrayList tasksofjob = new ArrayList();\n        int startlinenumber = 0;\n        int endlinenumber = 0;\n        try {\n            BufferedReader bufferedReader = new BufferedReader(new FileReader(filePath));\n            while ((line2 = bufferedReader.readLine()) != null) {\n                String[] words = line2.split(\"\\s+\");\n                for (int i = 0; i < words.length; i++) {\n                    if (words[i].equals(\"(JOBTYPES\")) {\n                        startlinenumber = i;\n                    }\n                }\n                for (int j = 0; j < words.length; j++) {\n                    if (words[j].equals(\"(STATIONS\")) {\n                        endlinenumber = j;\n                    }\n                }\n                for (int k = startlinenumber; k < endlinenumber; k++) {\n                    if (words[k].startsWith(\"T\")) ;\n                    tasksofjob.add(words[k]);\n                }\n                ArrayList taskofstation = new ArrayList();\n                for (int a = endlinenumber; a < words.length; a++) {\n                    if (words[a].startsWith(\"T\")) ;\n                    taskofstation.add(words[a]);\n                }\n                int b = taskofstation.size();\n                int c = tasksofjob.size();\n                for (int i = 0; i < b; i++) {\n                    for (int j = 0; j < c; j++) {\n                        if (taskofstation.get(i) != tasksofjob.get(j)) {\n                            throw new Exception(\"task\" + i + \"is not executed at any station\");\n                        }\n                    }\n                }\n            }\n\n        } catch (Exception e) {\n            System.out.println(e);\n        }\n        printWorkflowInfo(input);\n\n        // Çalışma akışı dosyasını oku ve işle\n        try {\n            parseWorkflowFile(\"workflow.txt\");\n        } catch (IOException e) {\n            System.err.println(\"Error reading workflow file: \" + e.getMessage());\n        }\n    }\n\n\n\n    public static void printWorkflowInfo(String content) {\n        String[] sections = content.split(\"\\\\(\");\n        Map<String, List<String>> taskTypes = new HashMap<>();\n        Map<String, List<String>> jobTypes = new HashMap<>();\n        Map<String, List<String>> stations = new HashMap<>();\n\n        for (String section : sections) {\n            section = section.trim();\n            if (section.startsWith(\"TASKTYPES\")) {\n                parseTaskTypes(section, taskTypes);\n            } else if (section.startsWith(\"JOBTYPES\")) {\n                parseJobTypes(section, jobTypes);\n            } else if (section.startsWith(\"STATIONS\")) {\n                parseStations(section, stations);\n            }\n        }\n\n        System.out.println(\"Task Types:\");\n        taskTypes.forEach((task, details) -> System.out.println(\"- \" + task + \": \" + String.join(\" \", details)));\n\n        System.out.println(\"\\nJob Types:\");\n        jobTypes.forEach((job, tasks) -> {\n            System.out.println(\"- \" + job + \":\");\n            tasks.forEach(task -> System.out.println(\"  - \" + task));\n        });\n\n        System.out.println(\"\\nStations:\");\n        stations.forEach((station, details) -> {\n            System.out.println(\"- \" + station + \":\");\n            details.forEach(detail -> System.out.println(\"  - \" + detail));\n        });\n    }\n\n    private static void parseTaskTypes(String section, Map<String, List<String>> taskTypes) {\n        String[] parts = section.split(\"\\\\s+\");\n        for (int i = 1; i < parts.length; i++) {\n            if (parts[i].matches(\"T\\\\d+\")) {\n                taskTypes.put(parts[i], new ArrayList<>());\n            } else {\n                List<String> details = taskTypes.get(parts[i - 1]);\n                details.add(parts[i]);\n            }\n        }\n    }\n\n    private static void parseJobTypes(String section, Map<String, List<String>> jobTypes) {\n        String[] parts = section.split(\"\\\\s+\");\n        String currentJob = null;\n        for (String part : parts) {\n            if (part.startsWith(\"J\")) {\n                currentJob = part;\n                jobTypes.put(currentJob, new ArrayList<>());\n            } else if (currentJob != null) {\n                jobTypes.get(currentJob).add(part);\n            }\n        }\n    }\n\n    private static void parseStations(String section, Map<String, List<String>> stations) {\n        String[] parts = section.split(\"\\\\s+\");\n        String currentStation = null;\n        for (String part : parts) {\n            if (part.startsWith(\"S\")) {\n                currentStation = part;\n                stations.put(currentStation, new ArrayList<>());\n            } else if (currentStation != null) {\n                stations.get(currentStation).add(part);\n            }\n        }\n    }\n    public static void parseWorkflowFile(String inputfile) throws IOException {\n        try (BufferedReader reader = new BufferedReader(new FileReader(inputfile))) {\n            String line;\n            int lineNumber = 0;\n            ArrayList<String> uniqueIds = new ArrayList<>();  // Using ArrayList instead of List\n\n            while ((line = reader.readLine()) != null) {\n                lineNumber++;\n                line = line.trim();\n                if (line.isEmpty()) {\n                    continue;\n                }\n\n                String[] parts = line.split(\"\\\\s+\");\n                if (parts.length < 3) {\n                    System.out.println(\"Syntax error on line \" + lineNumber + \": Each line must have at least 3 parts.\");\n                    continue;\n                }\n                String taskType = parts[0];\n                String jobId = parts[1];\n                String stationInfo = parts[2];\n\n                if (Character.isDigit(taskType.charAt(0))) {\n                    System.out.println(\"Syntax error on line \" + lineNumber + \": Task type '\" + taskType + \"' cannot start with a number.\");\n                    continue;\n                }\n                if (!jobId.matches(\"\\\\d+\")) {\n                    System.out.println(\"Syntax error on line \" + lineNumber + \": Job ID '\" + jobId + \"' must be a numeric value.\");\n                    continue;\n                }\n\n                if (uniqueIds.contains(jobId)) {\n                    System.out.println(\"Semantic error on line \" + lineNumber + \": Job ID '\" + jobId + \"' must be unique.\");\n                    continue;\n                } else {\n                    uniqueIds.add(jobId);\n                }\n\n                String[] stationParts = stationInfo.split(\",\");\n                if (stationParts.length != 2 || !stationParts[0].matches(\"\\\\d+\") || !stationParts[1].matches(\"\\\\d+\")) {\n                    System.out.println(\"Syntax error on line \" + lineNumber + \": Invalid station information '\" + stationInfo + \"'.\");\n                    continue;\n                }\n                int stationNumber = Integer.parseInt(stationParts[0]);\n                int stationRange = Integer.parseInt(stationParts[1]);\n                if (stationNumber < 1 || stationRange < 1 || stationRange > 100) {\n                    System.out.println(\"Semantic error on line \" + lineNumber + \": Station range '\" + stationRange + \"' must be between 1 and 100.\");\n                    continue;\n                }\n\n                Task task = new Task(taskType, 2);\n                System.out.println(\"Successfully parsed line \" + lineNumber + \": Task Type: \" + taskType + \", Job ID: \" + jobId + \", Station Info: \" + stationInfo);\n            }\n        }\n    }\n\n    public static String TaskReading(String inputfile) throws IOException {\n        StringBuilder stringBuilder = new StringBuilder();\n        try (BufferedReader reader = new BufferedReader(new FileReader(inputfile))) {\n            String line;\n            while ((line = reader.readLine()) != null) {\n                stringBuilder.append(line).append(\"\\n\"); // Append each line with a new line character\n            }\n        }\n        return stringBuilder.toString();\n    }\n\n    public static String Rename(String input) {\n        if (Character.isDigit(input.charAt(0))) {\n            throw new IllegalArgumentException(\"Task statement cannot start with a number!\");\n        }\n        return input;\n    }\n}\n\n/* public static String TaskReading(String WrongFile) throws IOException {\n\n\n    public static String TaskReading(String WrongFile) throws IOException {\n        StringBuilder stringBuilder = new StringBuilder();\n        try (BufferedReader reader = new BufferedReader(new FileReader(WrongFile))) {\n            String line;\n            while ((line = reader.readLine()) != null) {\n                stringBuilder.append(line);\n            }\n        }\n        return stringBuilder.toString();\n    }\n\n    public static String Rename(String input) {\n        if (Character.isDigit(input.charAt(0))) {\n            throw new IllegalArgumentException(\"Task statement can not start with a number !.\");\n        }\n        return input;\n    }\n\n\n\n    public static void parseWorkflowFile(String inputfile) throws IOException {\n        try (BufferedReader reader = new BufferedReader(new FileReader(inputfile))) {\n            String line;\n            int lineNumber = 0;\n            Set<String> uniqueIds = new HashSet<>();\n\n            while ((line = reader.readLine()) != null) {\n                lineNumber++;\n                line = line.trim();\n                if (line.isEmpty() || line.startsWith(\"#\")) {\n                    continue;\n                }\n\n                String[] parts = line.split(\"\\s+\");\n                if (parts.length < 3) {\n                    System.out.printf(\"Syntax error on line %d: Each line must have at least 3 parts.%n\", lineNumber);\n                    continue;\n                }\n                String taskType = parts[0];\n                String jobId = parts[1];\n                String stationInfo = parts[2];\n\n                if (Character.isDigit(taskType.charAt(0))) {\n                    System.out.printf(\"Syntax error on line %d: Task type '%s' cannot start with a number.%n\", lineNumber, taskType);\n\n                    continue;\n                }\n                if (!jobId.matches(\"\\\\d+\")) {\n                    System.out.printf(\"Syntax error on line %d: Job ID '%s' must be a numeric value.%n\", lineNumber, jobId);\n                    continue;\n                }\n\n                if (!uniqueIds.add(jobId)) {\n                    System.out.printf(\"Semantic error on line %d: Job ID '%s' must be unique.%n\", lineNumber, jobId);\n                    continue;\n                }\n\n                String[] stationParts = stationInfo.split(\",\");\n                if (stationParts.length != 2 || !stationParts[0].matches(\"\\\\d+\") || !stationParts[1].matches(\"\\\\d+\")) {\n                    System.out.printf(\"Syntax error on line %d: Invalid station information '%s'.%n\", lineNumber, stationInfo);\n                    continue;\n                }\n                int stationNumber = Integer.parseInt(stationParts[0]);\n                int stationRange = Integer.parseInt(stationParts[1]);\n                if (stationNumber < 1 || stationRange < 1 || stationRange > 100) {\n                    System.out.printf(\"Semantic error on line %d: Station range '%d' must be between 1 and 100.%n\", lineNumber, stationRange);\n                    continue;\n                }\n\n\n                Task task = new Task(taskType ,2);\n                System.out.printf(\"Successfully parsed line %d: Task Type: %s, Job ID: %s, Station Info: %s%n\", lineNumber, taskType, jobId, stationInfo);\n            }\n        }\n    }\n\n\n}\n\n */\n\n\n\n    \n\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Main.java b/src/Main.java
--- a/src/Main.java	(revision 262481f7bcc51bbba05f9130e20a4797049ea897)
+++ b/src/Main.java	(date 1715978149656)
@@ -73,6 +73,9 @@
             BufferedReader bufferedReader = new BufferedReader(new FileReader(filePath));
             while ((line2 = bufferedReader.readLine()) != null) {
                 String[] words = line2.split("\s+");
+                for(int a=0;a<words.length;a++){
+                    System.out.println(words[a]);
+                }
                 for (int i = 0; i < words.length; i++) {
                     if (words[i].equals("(JOBTYPES")) {
                         startlinenumber = i;
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"AutoImportSettings\">\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\n  </component>\n  <component name=\"ChangeListManager\">\n    <list default=\"true\" id=\"c6b30def-f593-410b-8ca6-fc914bf6677d\" name=\"Changes\" comment=\"changes\">\n      <change beforePath=\"$PROJECT_DIR$/.idea/misc.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/misc.xml\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_10_05_2024_16_49_[Changes]/shelved.patch\" beforeDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_10_05_2024_16_49__Changes_.xml\" beforeDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_17_05_2024_16_47__Changes_.xml\" beforeDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/Main.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/Main.java\" afterDir=\"false\" />\n    </list>\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\n  </component>\n  <component name=\"FileTemplateManagerImpl\">\n    <option name=\"RECENT_TEMPLATES\">\n      <list>\n        <option value=\"Class\" />\n      </list>\n    </option>\n  </component>\n  <component name=\"Git.Settings\">\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\n  </component>\n  <component name=\"GitHubPullRequestSearchHistory\">{\n  &quot;lastFilter&quot;: {\n    &quot;state&quot;: &quot;OPEN&quot;,\n    &quot;assignee&quot;: &quot;EmirayDurmaz&quot;\n  }\n}</component>\n  <component name=\"GithubPullRequestsUISettings\">{\n  &quot;selectedUrlAndAccountId&quot;: {\n    &quot;url&quot;: &quot;https://github.com/Yaseminkocar/se116project.git&quot;,\n    &quot;accountId&quot;: &quot;f876dfee-e282-4bb3-ac51-b7a06d3e1894&quot;\n  }\n}</component>\n  <component name=\"MarkdownSettingsMigration\">\n    <option name=\"stateVersion\" value=\"1\" />\n  </component>\n  <component name=\"ProjectColorInfo\">{\n  &quot;customColor&quot;: &quot;&quot;,\n  &quot;associatedIndex&quot;: 4\n}</component>\n  <component name=\"ProjectId\" id=\"2flxulGE1TD1wiPGhb4j94xWvUK\" />\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\">\n    <OptionsSetting value=\"false\" id=\"Update\" />\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\n  </component>\n  <component name=\"ProjectViewState\">\n    <option name=\"flattenPackages\" value=\"true\" />\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\n    <option name=\"showLibraryContents\" value=\"true\" />\n    <option name=\"showMembers\" value=\"true\" />\n    <option name=\"showVisibilityIcons\" value=\"true\" />\n  </component>\n  <component name=\"PropertiesComponent\">{\n  &quot;keyToString&quot;: {\n    &quot;Application.Main.executor&quot;: &quot;Run&quot;,\n    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\n    &quot;git-widget-placeholder&quot;: &quot;master&quot;,\n    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,\n    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,\n    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;\n  }\n}</component>\n  <component name=\"RunManager\" selected=\"Application.Main\">\n    <configuration name=\"Main\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\n      <option name=\"MAIN_CLASS_NAME\" value=\"Main\" />\n      <module name=\"asdfgh\" />\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <configuration name=\"WorkFlowParser\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\n      <option name=\"MAIN_CLASS_NAME\" value=\"WorkFlowParser\" />\n      <module name=\"asdfgh\" />\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <recent_temporary>\n      <list>\n        <item itemvalue=\"Application.Main\" />\n        <item itemvalue=\"Application.WorkFlowParser\" />\n      </list>\n    </recent_temporary>\n  </component>\n  <component name=\"SharedIndexes\">\n    <attachedChunks>\n      <set>\n        <option value=\"bundled-jdk-9f38398b9061-18abd8497189-intellij.indexing.shared.core-IU-241.14494.240\" />\n        <option value=\"bundled-js-predefined-1d06a55b98c1-74d2a5396914-JavaScript-IU-241.14494.240\" />\n      </set>\n    </attachedChunks>\n  </component>\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\n  <component name=\"TaskManager\">\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\n      <changelist id=\"c6b30def-f593-410b-8ca6-fc914bf6677d\" name=\"Changes\" comment=\"\" />\n      <created>1714389694199</created>\n      <option name=\"number\" value=\"Default\" />\n      <option name=\"presentableId\" value=\"Default\" />\n      <updated>1714389694199</updated>\n    </task>\n    <task id=\"LOCAL-00001\" summary=\"commit\">\n      <created>1714390906500</created>\n      <option name=\"number\" value=\"00001\" />\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1714390906500</updated>\n    </task>\n    <task id=\"LOCAL-00002\" summary=\"meltemin commiti\">\n      <created>1714461371483</created>\n      <option name=\"number\" value=\"00002\" />\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1714461371483</updated>\n    </task>\n    <task id=\"LOCAL-00003\" summary=\"meltemin commiti 2\">\n      <created>1714461447617</created>\n      <option name=\"number\" value=\"00003\" />\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1714461447617</updated>\n    </task>\n    <task id=\"LOCAL-00004\" summary=\"Classes\">\n      <created>1714565742088</created>\n      <option name=\"number\" value=\"00004\" />\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1714565742088</updated>\n    </task>\n    <task id=\"LOCAL-00005\" summary=\"some bugs fixed\">\n      <created>1715370784472</created>\n      <option name=\"number\" value=\"00005\" />\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1715370784472</updated>\n    </task>\n    <task id=\"LOCAL-00006\" summary=\"changes\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1715885718441</created>\n      <option name=\"number\" value=\"00006\" />\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1715885718441</updated>\n    </task>\n    <task id=\"LOCAL-00007\" summary=\"changes\">\n      <created>1715937727609</created>\n      <option name=\"number\" value=\"00007\" />\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1715937727609</updated>\n    </task>\n    <task id=\"LOCAL-00008\" summary=\"senkronize\">\n      <created>1715941589521</created>\n      <option name=\"number\" value=\"00008\" />\n      <option name=\"presentableId\" value=\"LOCAL-00008\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1715941589521</updated>\n    </task>\n    <option name=\"localTasksCounter\" value=\"9\" />\n    <servers />\n  </component>\n  <component name=\"TypeScriptGeneratedFilesManager\">\n    <option name=\"version\" value=\"3\" />\n  </component>\n  <component name=\"Vcs.Log.Tabs.Properties\">\n    <option name=\"TAB_STATES\">\n      <map>\n        <entry key=\"MAIN\">\n          <value>\n            <State />\n          </value>\n        </entry>\n      </map>\n    </option>\n  </component>\n  <component name=\"VcsManagerConfiguration\">\n    <MESSAGE value=\"commit\" />\n    <MESSAGE value=\"meltemin commiti\" />\n    <MESSAGE value=\"meltemin commiti 2\" />\n    <MESSAGE value=\"Classes\" />\n    <MESSAGE value=\"some bugs fixed\" />\n    <MESSAGE value=\"changes\" />\n    <MESSAGE value=\"senkronize\" />\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"senkronize\" />\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 262481f7bcc51bbba05f9130e20a4797049ea897)
+++ b/.idea/workspace.xml	(date 1715978149535)
@@ -5,10 +5,6 @@
   </component>
   <component name="ChangeListManager">
     <list default="true" id="c6b30def-f593-410b-8ca6-fc914bf6677d" name="Changes" comment="changes">
-      <change beforePath="$PROJECT_DIR$/.idea/misc.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/misc.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_10_05_2024_16_49_[Changes]/shelved.patch" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_10_05_2024_16_49__Changes_.xml" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_17_05_2024_16_47__Changes_.xml" beforeDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/Main.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/Main.java" afterDir="false" />
     </list>
@@ -165,7 +161,14 @@
       <option name="project" value="LOCAL" />
       <updated>1715941589521</updated>
     </task>
-    <option name="localTasksCounter" value="9" />
+    <task id="LOCAL-00009" summary="changes">
+      <created>1715965168360</created>
+      <option name="number" value="00009" />
+      <option name="presentableId" value="LOCAL-00009" />
+      <option name="project" value="LOCAL" />
+      <updated>1715965168361</updated>
+    </task>
+    <option name="localTasksCounter" value="10" />
     <servers />
   </component>
   <component name="TypeScriptGeneratedFilesManager">
@@ -188,8 +191,8 @@
     <MESSAGE value="meltemin commiti 2" />
     <MESSAGE value="Classes" />
     <MESSAGE value="some bugs fixed" />
-    <MESSAGE value="changes" />
     <MESSAGE value="senkronize" />
-    <option name="LAST_COMMIT_MESSAGE" value="senkronize" />
+    <MESSAGE value="changes" />
+    <option name="LAST_COMMIT_MESSAGE" value="changes" />
   </component>
 </project>
\ No newline at end of file
